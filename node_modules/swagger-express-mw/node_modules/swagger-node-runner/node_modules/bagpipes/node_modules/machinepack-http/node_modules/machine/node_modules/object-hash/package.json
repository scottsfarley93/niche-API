{
  "name": "object-hash",
  "version": "0.3.0",
  "description": "Generate hashes from javascript objects in node and the browser.",
  "homepage": "https://github.com/puleos/object-hash",
  "repository": {
    "type": "git",
    "url": "https://github.com/puleos/object-hash"
  },
  "keywords": [
    "object",
    "hash",
    "sha1",
    "md5"
  ],
  "bugs": {
    "url": "https://github.com/puleos/object-hash/issues"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Scott Puleo",
    "email": "puleos@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "tape": "~2.10.2",
    "gulp": "~3.5.5",
    "gulp-jshint": "~1.5.0",
    "gulp-browserify": "~0.4.6",
    "jshint-stylish": "~0.1.5",
    "gulp-exec": "~1.0.4",
    "gulp-uglify": "~0.2.1",
    "gulp-rename": "~1.2.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/12.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "readme": "# Object-Hash\n\n![status](https://secure.travis-ci.org/puleos/object-hash.png?branch=master)\n\n![testling](https://ci.testling.com/puleos/object-hash.png?v=0.2.0)\n\nGenerate hashes from objects and values in node and the browser.  Uses node.js\ncrypo module for hashing.  Supports sha1, md5 and many others (depending on the platform).\n\n* Hash values of any type.\n* Provides a hash table implementation.\n* Supports a keys only option for grouping like objects with different values.\n\n```\nvar hash = require('object-hash');\n```\n## hash(value, options);\nGenerate a hash from any object or type.  Defaults to sha1 with hex encoding.\n*  `algorithm` hash algo to be used: 'sha1', 'md5'\n*  `excludeValues` {true|false} hash object keys, values ignored\n*  `encoding` hash encoding, supports 'buffer', 'hex', 'binary', 'base64'\n\n## hash.sha1(value);\nHash using the sha1 algorithm.\n\n*Sugar method, equivalent to hash(value, {algorithm: 'sha1'})*\n\n## hash.keys(value);\nHash object keys using the sha1 algorithm, values ignored.\n\n*Sugar method, equivalent to hash(value, {excludeValues: true})*\n\n## hash.MD5(value);\nHash using the md5 algorithm.\n\n*Sugar method, equivalent to hash(value, {algorithm: 'md5'})*\n\n## hash.keysMD5(value);\nHash object keys using the md5 algorithm, values ignored.\n\n*Sugar method, equivalent to hash(value, {algorithm: 'md5', excludeValues: true})*\n\n## var hashTable = new hash.HashTable(options);\nCreate a new HashTable instance.  Hashing options are supported and applied to all values\nadded to the table.\n\n## hashTable.add(value1, value2, ...);\nAdd an object to the hash table. Supports n parameters or an array of values to be\nadded to the table.  \n\n*Note: if you wish to evaluate an array as a single table entry\nyou must wrap it first `{[1,2,3,4]}` otherwise each element will be added to the\ntable separately.*\n\n## hashTable.getValue(hashKey);\nRetrive the objects value from the table by hash key.  If there is no matching entry\nreturns undefined.\n\n## hashTable.getCount(hashKey);\nRetrieve a counter representing the number of times an object was added to\nthe table.  Returns 0 if a matching key is not found.\n\n## hashTable.hasKey(hashKey);\nReturns true if the specified hash is in the hash table otherwise false.\n\n## hashTable.toArray();\nReturns an array of the hash table contents in the following format:\n```\n[ {hash:'14fa461bf4b98155e82adc86532938553b4d33a9',\n    count: 2, value: {foo: 'bar', baz: true }},\n  {hash:'14fa461bf4b98155e82adc86532938553b4d33a9',\n    count: 1, value: {foo: 'bar', baz: true }} ]\n```\n*Note: when the excludeValues option is set, the `value` of the hash table is an array of objects with matching keys.*\n\n## hashTable.reset();\nClears the contents of the hash table.\n\n## Installation\n\nnode:\n```\nnpm install object-hash\n```\n\nbrowser: */dist/object_hash.js*\n```\n<script src=\"object_hash.js\" type=\"text/javascript\"></script>\n```\n\n## Example usage\n```js\nvar hash = require('object-hash');\n\nvar peter = {name: 'Peter', stapler: false, friends: ['Joanna', 'Michael', 'Samir'] };\nvar michael = {name: 'Michael', stapler: false, friends: ['Peter', 'Samir'] };\nvar bob = {name: 'Bob', stapler: true, friends: [] };\n\n/***\n * sha1 hex encoding (default)\n */\nhash(peter);\n// 14fa461bf4b98155e82adc86532938553b4d33a9\nhash(michael);\n// 4b2b30e27699979ce46714253bc2213010db039c\nhash(bob);\n// 38d96106bc8ef3d8bd369b99bb6972702c9826d5\n\n/***\n * hash object keys, values ignored\n */\nhash(peter, { excludeValues: true });\n// 48f370a772c7496f6c9d2e6d92e920c87dd00a5c\nhash(michael, { excludeValues: true });\n// 48f370a772c7496f6c9d2e6d92e920c87dd00a5c\nhash.keys(bob);\n// 48f370a772c7496f6c9d2e6d92e920c87dd00a5c\n\n/***\n * md5 base64 encoding\n */\nhash(peter, { algorithm: 'md5', encoding: 'base64' });\n// 6rkWaaDiG3NynWw4svGH7g==\nhash(michael, { algorithm: 'md5', encoding: 'base64' });\n// djXaWpuWVJeOF8Sb6SFFNg==\nhash(bob, { algorithm: 'md5', encoding: 'base64' });\n// lFzkw/IJ8/12jZI0rQeS3w==\n\n/***\n * HashTable example\n */\nvar hashTable = new hash.HashTable();\nvar peterHash = hash(peter);\n\nhashTable.add(peter, michael, bob);\nhashTable.getValue(peterHash);\n// {name: 'Peter', stapler: false, friends: ['Joanna', 'Michael', 'Samir'] };\nhashTable.getCount(peterHash);\n// 1\nhashTable.add({name: 'Peter', stapler: false, friends: ['Joanna', 'Michael', 'Samir'] });\nhashTable.getCount(peterHash);\n// 2\nhashTable.hasKey(peterHash);\n// true\nhashTable.toArray();\n// [ {hash:'14fa461bf4b98155e82adc86532938553b4d33a9',\n//    count: 2, value: {name: 'Peter', stapler: false, friends: ['Joanna', 'Michael', 'Samir'] }},\n//  {hash:'4b2b30e27699979ce46714253bc2213010db039c',\n//    count: 1, value: {name: 'Michael', stapler: false, friends: ['Peter', 'Samir'] }},\n//  {hash:'38d96106bc8ef3d8bd369b99bb6972702c9826d5',\n//    count: 1, value: {name: 'Bob', stapler: true, friends: [] }} ]\n```\n\n## Legacy Browser Support\nIE <= 8 and Opera <= 11 support dropped in version 0.3.0.  If you require \nlegacy browser support you must either use an ES5 shim or use version 0.2.5\nof this module.\n\n## Development\n\n```\ngit clone https://github.com/puleos/object-hash\n```\n\n### gulp tasks\n* `gulp watch` (default) watch files, test and lint on change/add\n* `gulp test` unit tests\n* `gulp lint` jshint\n* `gulp dist` create browser version in /dist\n\n## License\nMIT\n",
  "readmeFilename": "readme.markdown",
  "_id": "object-hash@0.3.0",
  "dist": {
    "shasum": "f9b060ae510ac329c305881fc4d18107d6418660"
  },
  "_from": "object-hash@~0.3.0",
  "_resolved": "https://registry.npmjs.org/object-hash/-/object-hash-0.3.0.tgz"
}
