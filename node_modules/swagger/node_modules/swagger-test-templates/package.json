{
  "name": "swagger-test-templates",
  "version": "1.3.0",
  "description": "Generate test code from a Swagger spec",
  "main": "index.js",
  "scripts": {
    "test": "node mocha.js",
    "pretest": "npm install && node pretest.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/apigee-127/swagger-test-templates.git"
  },
  "keywords": [
    "Swagger",
    "API",
    "Test"
  ],
  "swagger-test-templates@1.0.0": [
    {
      "name": "Mohsen Azimi",
      "email": "me@azimi.me",
      "url": "http://azimi.me"
    },
    {
      "name": "Linjie Peng",
      "email": "elsa.peng@hotmail.com"
    },
    {
      "name": "Noah Dietz",
      "email": "noahdietz24@gmail.com"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/apigee-127/swagger-test-templates/issues"
  },
  "homepage": "https://github.com/apigee-127/swagger-test-templates#readme",
  "devDependencies": {
    "chai": "^3.0.0",
    "dotenv": "^1.2.0",
    "eslint": "^0.24.0",
    "js-yaml": "^3.3.1",
    "mocha": "^2.2.5",
    "mocha-eslint": "^0.1.7",
    "ncp": "^2.0.0",
    "rewire": "^2.3.4",
    "walk": "^2.3.9",
    "z-schema": "^3.12.0"
  },
  "dependencies": {
    "handlebars": "^3.0.3",
    "json-schema-deref-sync": "^0.3.1",
    "lodash": "^3.10.0",
    "sanitize-filename": "^1.3.0",
    "string": "^3.3.0"
  },
  "readme": "# Swagger Test Templates\n\n[![Build Status](https://travis-ci.org/apigee-127/swagger-test-templates.svg?branch=master)](https://travis-ci.org/apigee-127/swagger-test-templates)\n\n> Generate test code from a [Swagger](http://swagger.io) spec(version 2.0)\n\n## Usage\n\nInstall via npm\n\n```\nnpm install --save swagger-test-templates\n```\n\nUse your [Swagger](http://swagger.io) API spec file to generate test for your API.\n\n```javascript\nvar stt = require('swagger-test-templates');\nvar swagger = require('/path/to/swagger.json');\nvar config = {\n  assertionFormat: 'should',\n  testModule: 'supertest',\n  pathName: ['/user', '/user/{id}'],\n  loadTest: [{pathName:'/user', operation:'get', load:{requests: 1000, concurrent: 100}}, { /* ... */ }],\n  maxLen: 80,\n  pathParams: {\n    \"id\": \"0123\"\n  }\n};\n\n// Generates an array of JavaScript test files following specified configuration\nstt.testGen(swagger, config);\n```\n\n## API\n\n`swagger-test-templates` module exports a function with following arguments and return values:\n\n### Arguments\n* **`assertionFormat`** *required*: One of `should`, `expect` or `assert`. Choose which assertion method should be used in output test code.\n* **`testModule`** *required*: One of `supertest` or `request`. Choose between direct API calls (`request`) vs. programatic access to your API (`supertest`).\n* **`pathName`** *required*: List of path names available in your Swagger API spec used to generate tests for. Empty array leads to **all paths**.\n* **`statusCodes`** *optional* Array with status codes to generate tests for. Useful for generating only happy-flow tests. Excluding this param will generate tests for all responses.\n* **`loadTest`** *optional*: List of objects info in your Swagger API spec used to generate stress tests. If specify, pathName & operation are **required**. Optional fields requests defaults to `1000`, concurrent defaults to `100`.\n* **`maxLen`** *optional*: Maximum line length. If set to `-1`, descriptions will not be truncated. Defaults to `80`.\n* **`pathParams`** *optional*: Object containing the values of a specific path parameters.\n* **`templatesPath`** *optional* String indicating a custom handlebars-template path for generating the tests. Note: copy all the templates to your custom directory, this is a 'all-or-nothing' path\n* **`requestData`** *optional* Array containing data to send with the request See section on requestData for more details\n\n### Return value\nAn array in which each string is content of a test file and the file name. Use this information to write those files to disk.\n\n## Sending requestData\nBases on your schema there a a few modules out there that allow you to generate mock request.\nYou can send this mock data along with the tests generated by this module by filling the `requestData` property of the module.\n The mock data needs to have with the following structure:\n \n```javascript\n{\n   '/endpoint': {\n       operation: {\n           'responseCode': [{ body: {}, description:'some description of the data']\n       }\n   }\n }\n \n```\n\nso, for example this could be:\n\n```javascript\n{\n     '/pet': {\n         post: {\n             '200': [{ \n               body: {\n                  id: 1,\n                  otherProperty: 'some property that is a string'\n                 },\n                 description: 'the description for this data'\n               }]\n         },\n         get: {\n            '200': [ {\n              guid: 'some_string_to_place_in_path',\n              anotherPathParam: 100,\n              description: 'valid path or query parameters'\n            }]\n         }\n     }\n }\n``` \n\nNote: for get-requests matching data will be transferred to the pathParams. So setting config.pathParams directly will have the same effect (see above).\n\nEvery mockData item in the `responseCode` array will be used to generate a test. The description will be added to the \"it\" function for reference.\n##License\n[MIT](/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "swagger-test-templates@1.3.0",
  "dist": {
    "shasum": "91c7f45f7d35ff160230ca35ef53b5ae9f384805"
  },
  "_from": "swagger-test-templates@^1.2.0",
  "_resolved": "https://registry.npmjs.org/swagger-test-templates/-/swagger-test-templates-1.3.0.tgz"
}
