{
  "author": {
    "name": "Alberto Bottarini",
    "email": "alberto.bottarini@gmail.com",
    "url": "http://www.albertobottarini.com"
  },
  "dependencies": {
    "mime": ">=1.2.5"
  },
  "description": "A simple class allows developer to have a clear dispatcher for dynamic pages and static resources.",
  "devDependencies": {},
  "keywords": [
    "util",
    "httpdispatcher",
    "dispatcher"
  ],
  "main": "httpdispatcher.js",
  "name": "httpdispatcher",
  "repository": {
    "url": "https://github.com/alberto-bottarini/httpdispatcher",
    "type": "git"
  },
  "version": "2.0.1",
  "license": "MIT",
  "readme": "httpdispatcher - basic dispatcher for node.js\n=======\n\nhttpdispatcher is a simple class allows developer to have a clear dispatcher for dynamic pages and static resources.\nClasses http.ServerRequest and http.ServerResponse earns new params property containing a map of received HTTP parameters.\nUsing httpdispatcher is pretty simple:\n\n```js\n\tvar HttpDispatcher = require('../httpdispatcher');\n\tvar http           = require('http');\n\tvar dispatcher     = new HttpDispatcher();\n\n\tdispatcher.setStatic('/resources');\n\tdispatcher.setStaticDirname('static');\n\n\tdispatcher.onGet(\"/page1\", function(req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Page One');\n\t}); \n\n\tdispatcher.onPost(\"/page2\", function(req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Page Two');\n\t});\n\n\tdispatcher.beforeFilter(/\\//, function(req, res, chain) { //any url\n\t\tconsole.log(\"Before filter\");\n\t\tchain.next(req, res, chain);\n\t});\n\n\tdispatcher.afterFilter(/\\//, function(req, res, chain) { //any url\n\t\tconsole.log(\"After filter\");\n\t\tchain.next(req, res, chain);\n\t});\n\n\tdispatcher.onError(function(req, res) {\n\t\tres.writeHead(404);\n\t\tres.end();\n\t});\n\n\thttp.createServer(function (req, res) {\n\t\tdispatcher.dispatch(req, res);\n\t}).listen(1337, '127.0.0.1');\n\t\n\t\n\t/*\n\tGET  /page1  => 'Page One'\n\tPOST /page2  => 'Page Two'\n\tGET  /page3  => 404\n\tGET  /resources/images-that-exists.png => Image resource\n\tGET  /resources/images-that-does-not-exists.png => 404\n\t*/\n```\t\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alberto-bottarini/httpdispatcher/issues"
  },
  "_id": "httpdispatcher@2.0.1",
  "dist": {
    "shasum": "16a6d3f5d07d75d0dd0f8976ed2d81c758527bb9"
  },
  "_from": "httpdispatcher@latest",
  "_resolved": "https://registry.npmjs.org/httpdispatcher/-/httpdispatcher-2.0.1.tgz"
}
