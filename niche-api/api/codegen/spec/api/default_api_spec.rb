=begin
Niche API

REST API to access gridded climate model data at specific points in time.  Developed specifically to support Ice Age Mapper / Niche Viewer, and to tie into morphospace visualizations of NeotomaDB data. Enables users to select climate data at single space-time points, arrays of space-time points, or time series at single points.  University of Wisconsin, Madison Department of Geography.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      @instance.should be_a(SwaggerClient::DefaultApi)
    end
  end

  # unit tests for get_averaging_period_types
  # 
  # Get a list of the time periods over which a variable could be averaged.  Averaging period types are the amount of time over which data is averaged.  For example, decadally averaged climate annual precipitation would represent a ten year average, and have an averaging period type of decades.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :averaging_period_type_id Database ID of the averaging period type.
  # @return [GenericResponse]
  describe 'get_averaging_period_types test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_data_point
  # 
  # Get data for a single space-time point for a given source and variable combination.
  # @param latitude Latitude of point of interest.
  # @param longitude Longitude of point of interest.
  # @param variable_id Database ID of variable of interest
  # @param source_id Database ID of source of interest.
  # @param years_bp years before present of point of interest. AD1950 is considered zero in this context.
  # @param [Hash] opts the optional parameters
  # @return [DataResponse]
  describe 'get_data_point test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_sources
  # 
  # Get a list of data sources in the database. A source is the data producer from which the raster data originated.  Each source contains information on the producer of the product, the model used to produced the data, the forcings/emissions scenario used to run the model, and the product version. In the current version, only a single source is supported, Lorenz et al (2016) downscaled north american CCSM3 climate model output.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :source_id Database ID of the source.
  # @option opts [Float] :scenario Emission scenario under which the model was run.
  # @option opts [Float] :version The version of the modeling product.
  # @return [GenericResponse]
  describe 'get_sources test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_timeseries
  # 
  # Get all time points in the database for a single spatial location.  References a single variable/source pair.
  # @param latitude Latitude of point of interest.
  # @param longitude Longitude of point of interest.
  # @param variable_id Database ID of variable of interest.
  # @param source_id Database ID of source of interest.
  # @param [Hash] opts the optional parameters
  # @return [GenericResponse]
  describe 'get_timeseries test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_variable_period_types
  # 
  # Get a list of the time periods a variable could represent. A variable period is period of time represented by the measurement. For example, monthly precipitation has a variable period of months.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :variable_period_type_id Database ID of the variable period type
  # @return [GenericResponse]
  describe 'get_variable_period_types test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_variable_types
  # 
  # Get a list of the variable types in the database. A variable type is a generic representation of what is measured in a dataset. For example, precipitation or maximum temperature.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :variable_type_id Database ID of the variable type
  # @return [GenericResponse]
  describe 'get_variable_types test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_variable_units
  # 
  # Get a list of variable units in the database. A variable unit is the units in which a variable is measured.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :variable_unit_id Database ID of the variableUnit.
  # @option opts [String] :variable_unit_abbreviation Abbreviation of the variable unit in SI units.
  # @return [GenericResponse]
  describe 'get_variable_units test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_variables
  # 
  # Returns a list of the variables that currently have raster data associated with them in the database.  A variable is a unique combination of units, averaging period, variable period, and variable type.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :variable_type Database ID of the variable type of interest.
  # @option opts [Integer] :variable_period Variable period by which to filter results.  A variable period type is the period over which the data is representitive.
  # @option opts [String] :variable_period_type String representation of the name of the variable period type over which the data is representitive. Example - month.
  # @option opts [Integer] :averaging_period Period over which the variable has been averaged.
  # @option opts [String] :averaging_period_type String representation of the type of period over which the variable has been averaged. Example - Week.
  # @option opts [String] :variable_units Canonical SI abbreviation for units in which the variable is measured.
  # @option opts [Integer] :variable_id Database ID of the variable. Returns a single unique variable as the result.
  # @return [VariableResponse]
  describe 'get_variables test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for post_data
  # 
  # Get data for an array of space-time points for a given source and variable combination. Each point in the array must specify latitude, longitude, and time.  The source and variables are specified for the request as a whole.
  # @param [Hash] opts the optional parameters
  # @option opts [PostDataRequest] :data An array of space-time locations for which to get data.
  # @return [DataResponse]
  describe 'post_data test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
