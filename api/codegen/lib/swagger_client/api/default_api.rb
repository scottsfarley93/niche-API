=begin
Niche API

REST API to access gridded climate model data at specific points in time.  Developed specifically to support Ice Age Mapper / Niche Viewer, and to tie into morphospace visualizations of NeotomaDB data. Enables users to select climate data at single space-time points, arrays of space-time points, or time series at single points.  University of Wisconsin, Madison Department of Geography.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get a list of the time periods over which a variable could be averaged.  Averaging period types are the amount of time over which data is averaged.  For example, decadally averaged climate annual precipitation would represent a ten year average, and have an averaging period type of decades.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :averaging_period_type_id Database ID of the averaging period type.
    # @return [GenericResponse]
    def get_averaging_period_types(opts = {})
      data, status_code, headers = get_averaging_period_types_with_http_info(opts)
      return data
    end

    # 
    # Get a list of the time periods over which a variable could be averaged.  Averaging period types are the amount of time over which data is averaged.  For example, decadally averaged climate annual precipitation would represent a ten year average, and have an averaging period type of decades.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :averaging_period_type_id Database ID of the averaging period type.
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_averaging_period_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_averaging_period_types ..."
      end
      
      # resource path
      local_var_path = "/averagingPeriodTypes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'averagingPeriodTypeId'] = opts[:'averaging_period_type_id'] if opts[:'averaging_period_type_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_averaging_period_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get data for a single space-time point for a given source and variable combination.
    # @param latitude Latitude of point of interest.
    # @param longitude Longitude of point of interest.
    # @param variable_id Database ID of variable of interest
    # @param source_id Database ID of source of interest.
    # @param years_bp years before present of point of interest. AD1950 is considered zero in this context.
    # @param [Hash] opts the optional parameters
    # @return [DataResponse]
    def get_data_point(latitude, longitude, variable_id, source_id, years_bp, opts = {})
      data, status_code, headers = get_data_point_with_http_info(latitude, longitude, variable_id, source_id, years_bp, opts)
      return data
    end

    # 
    # Get data for a single space-time point for a given source and variable combination.
    # @param latitude Latitude of point of interest.
    # @param longitude Longitude of point of interest.
    # @param variable_id Database ID of variable of interest
    # @param source_id Database ID of source of interest.
    # @param years_bp years before present of point of interest. AD1950 is considered zero in this context.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataResponse, Fixnum, Hash)>] DataResponse data, response status code and response headers
    def get_data_point_with_http_info(latitude, longitude, variable_id, source_id, years_bp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_data_point ..."
      end
      
      # verify the required parameter 'latitude' is set
      fail "Missing the required parameter 'latitude' when calling get_data_point" if latitude.nil?
      
      # verify the required parameter 'longitude' is set
      fail "Missing the required parameter 'longitude' when calling get_data_point" if longitude.nil?
      
      # verify the required parameter 'variable_id' is set
      fail "Missing the required parameter 'variable_id' when calling get_data_point" if variable_id.nil?
      
      # verify the required parameter 'source_id' is set
      fail "Missing the required parameter 'source_id' when calling get_data_point" if source_id.nil?
      
      # verify the required parameter 'years_bp' is set
      fail "Missing the required parameter 'years_bp' when calling get_data_point" if years_bp.nil?
      
      # resource path
      local_var_path = "/data".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'variableID'] = variable_id
      query_params[:'sourceID'] = source_id
      query_params[:'yearsBP'] = years_bp

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_data_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get a list of data sources in the database. A source is the data producer from which the raster data originated.  Each source contains information on the producer of the product, the model used to produced the data, the forcings/emissions scenario used to run the model, and the product version. In the current version, only a single source is supported, Lorenz et al (2016) downscaled north american CCSM3 climate model output.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :source_id Database ID of the source.
    # @option opts [Float] :scenario Emission scenario under which the model was run.
    # @option opts [Float] :version The version of the modeling product.
    # @return [GenericResponse]
    def get_sources(opts = {})
      data, status_code, headers = get_sources_with_http_info(opts)
      return data
    end

    # 
    # Get a list of data sources in the database. A source is the data producer from which the raster data originated.  Each source contains information on the producer of the product, the model used to produced the data, the forcings/emissions scenario used to run the model, and the product version. In the current version, only a single source is supported, Lorenz et al (2016) downscaled north american CCSM3 climate model output.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :source_id Database ID of the source.
    # @option opts [Float] :scenario Emission scenario under which the model was run.
    # @option opts [Float] :version The version of the modeling product.
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_sources ..."
      end
      
      # resource path
      local_var_path = "/sources".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sourceId'] = opts[:'source_id'] if opts[:'source_id']
      query_params[:'scenario'] = opts[:'scenario'] if opts[:'scenario']
      query_params[:'version'] = opts[:'version'] if opts[:'version']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get all time points in the database for a single spatial location.  References a single variable/source pair.
    # @param latitude Latitude of point of interest.
    # @param longitude Longitude of point of interest.
    # @param variable_id Database ID of variable of interest.
    # @param source_id Database ID of source of interest.
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def get_timeseries(latitude, longitude, variable_id, source_id, opts = {})
      data, status_code, headers = get_timeseries_with_http_info(latitude, longitude, variable_id, source_id, opts)
      return data
    end

    # 
    # Get all time points in the database for a single spatial location.  References a single variable/source pair.
    # @param latitude Latitude of point of interest.
    # @param longitude Longitude of point of interest.
    # @param variable_id Database ID of variable of interest.
    # @param source_id Database ID of source of interest.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_timeseries_with_http_info(latitude, longitude, variable_id, source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_timeseries ..."
      end
      
      # verify the required parameter 'latitude' is set
      fail "Missing the required parameter 'latitude' when calling get_timeseries" if latitude.nil?
      
      # verify the required parameter 'longitude' is set
      fail "Missing the required parameter 'longitude' when calling get_timeseries" if longitude.nil?
      
      # verify the required parameter 'variable_id' is set
      fail "Missing the required parameter 'variable_id' when calling get_timeseries" if variable_id.nil?
      
      # verify the required parameter 'source_id' is set
      fail "Missing the required parameter 'source_id' when calling get_timeseries" if source_id.nil?
      
      # resource path
      local_var_path = "/timeseries".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'variableID'] = variable_id
      query_params[:'sourceID'] = source_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_timeseries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get a list of the time periods a variable could represent. A variable period is period of time represented by the measurement. For example, monthly precipitation has a variable period of months.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_period_type_id Database ID of the variable period type
    # @return [GenericResponse]
    def get_variable_period_types(opts = {})
      data, status_code, headers = get_variable_period_types_with_http_info(opts)
      return data
    end

    # 
    # Get a list of the time periods a variable could represent. A variable period is period of time represented by the measurement. For example, monthly precipitation has a variable period of months.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_period_type_id Database ID of the variable period type
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_variable_period_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_variable_period_types ..."
      end
      
      # resource path
      local_var_path = "/variablePeriodTypes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'variablePeriodTypeId'] = opts[:'variable_period_type_id'] if opts[:'variable_period_type_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_variable_period_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get a list of the variable types in the database. A variable type is a generic representation of what is measured in a dataset. For example, precipitation or maximum temperature.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_type_id Database ID of the variable type
    # @return [GenericResponse]
    def get_variable_types(opts = {})
      data, status_code, headers = get_variable_types_with_http_info(opts)
      return data
    end

    # 
    # Get a list of the variable types in the database. A variable type is a generic representation of what is measured in a dataset. For example, precipitation or maximum temperature.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_type_id Database ID of the variable type
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_variable_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_variable_types ..."
      end
      
      # resource path
      local_var_path = "/variableTypes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'variableTypeId'] = opts[:'variable_type_id'] if opts[:'variable_type_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_variable_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get a list of variable units in the database. A variable unit is the units in which a variable is measured.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_unit_id Database ID of the variableUnit.
    # @option opts [String] :variable_unit_abbreviation Abbreviation of the variable unit in SI units.
    # @return [GenericResponse]
    def get_variable_units(opts = {})
      data, status_code, headers = get_variable_units_with_http_info(opts)
      return data
    end

    # 
    # Get a list of variable units in the database. A variable unit is the units in which a variable is measured.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :variable_unit_id Database ID of the variableUnit.
    # @option opts [String] :variable_unit_abbreviation Abbreviation of the variable unit in SI units.
    # @return [Array<(GenericResponse, Fixnum, Hash)>] GenericResponse data, response status code and response headers
    def get_variable_units_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_variable_units ..."
      end
      
      # resource path
      local_var_path = "/variableUnits".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'variableUnitId'] = opts[:'variable_unit_id'] if opts[:'variable_unit_id']
      query_params[:'variableUnitAbbreviation'] = opts[:'variable_unit_abbreviation'] if opts[:'variable_unit_abbreviation']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GenericResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_variable_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of the variables that currently have raster data associated with them in the database.  A variable is a unique combination of units, averaging period, variable period, and variable type.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :variable_type Database ID of the variable type of interest.
    # @option opts [Integer] :variable_period Variable period by which to filter results.  A variable period type is the period over which the data is representitive.
    # @option opts [String] :variable_period_type String representation of the name of the variable period type over which the data is representitive. Example - month.
    # @option opts [Integer] :averaging_period Period over which the variable has been averaged.
    # @option opts [String] :averaging_period_type String representation of the type of period over which the variable has been averaged. Example - Week.
    # @option opts [String] :variable_units Canonical SI abbreviation for units in which the variable is measured.
    # @option opts [Integer] :variable_id Database ID of the variable. Returns a single unique variable as the result.
    # @return [VariableResponse]
    def get_variables(opts = {})
      data, status_code, headers = get_variables_with_http_info(opts)
      return data
    end

    # 
    # Returns a list of the variables that currently have raster data associated with them in the database.  A variable is a unique combination of units, averaging period, variable period, and variable type.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :variable_type Database ID of the variable type of interest.
    # @option opts [Integer] :variable_period Variable period by which to filter results.  A variable period type is the period over which the data is representitive.
    # @option opts [String] :variable_period_type String representation of the name of the variable period type over which the data is representitive. Example - month.
    # @option opts [Integer] :averaging_period Period over which the variable has been averaged.
    # @option opts [String] :averaging_period_type String representation of the type of period over which the variable has been averaged. Example - Week.
    # @option opts [String] :variable_units Canonical SI abbreviation for units in which the variable is measured.
    # @option opts [Integer] :variable_id Database ID of the variable. Returns a single unique variable as the result.
    # @return [Array<(VariableResponse, Fixnum, Hash)>] VariableResponse data, response status code and response headers
    def get_variables_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#get_variables ..."
      end
      
      # resource path
      local_var_path = "/variables".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'variableType'] = opts[:'variable_type'] if opts[:'variable_type']
      query_params[:'variablePeriod'] = opts[:'variable_period'] if opts[:'variable_period']
      query_params[:'variablePeriodType'] = opts[:'variable_period_type'] if opts[:'variable_period_type']
      query_params[:'averagingPeriod'] = opts[:'averaging_period'] if opts[:'averaging_period']
      query_params[:'averagingPeriodType'] = opts[:'averaging_period_type'] if opts[:'averaging_period_type']
      query_params[:'variableUnits'] = opts[:'variable_units'] if opts[:'variable_units']
      query_params[:'variableID'] = opts[:'variable_id'] if opts[:'variable_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get data for an array of space-time points for a given source and variable combination. Each point in the array must specify latitude, longitude, and time.  The source and variables are specified for the request as a whole.
    # @param [Hash] opts the optional parameters
    # @option opts [PostDataRequest] :data An array of space-time locations for which to get data.
    # @return [DataResponse]
    def post_data(opts = {})
      data, status_code, headers = post_data_with_http_info(opts)
      return data
    end

    # 
    # Get data for an array of space-time points for a given source and variable combination. Each point in the array must specify latitude, longitude, and time.  The source and variables are specified for the request as a whole.
    # @param [Hash] opts the optional parameters
    # @option opts [PostDataRequest] :data An array of space-time locations for which to get data.
    # @return [Array<(DataResponse, Fixnum, Hash)>] DataResponse data, response status code and response headers
    def post_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#post_data ..."
      end
      
      # resource path
      local_var_path = "/data".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
